#!/usr/bin/env python3
"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ pgvector –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ö—Ä–∞–Ω–µ–Ω–∏—è —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤
"""

import sys
import os
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ services
services_path = Path(__file__).parent.parent
sys.path.append(str(services_path))

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
from dotenv import load_dotenv
load_dotenv('.env.local')

from sqlalchemy import text
from shared.models.database import SessionLocal

def check_pgvector():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É pgvector"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ pgvector...")
    
    db = SessionLocal()
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
        result = db.execute(text("SELECT * FROM pg_extension WHERE extname = 'vector'")).fetchall()
        
        if result:
            print("‚úÖ pgvector —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            for row in result:
                print(f"   –í–µ—Ä—Å–∏—è: {row[1]}")
                print(f"   –°—Ö–µ–º–∞: {row[2]}")
        else:
            print("‚ùå pgvector –ù–ï —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã
        operators = db.execute(text("""
            SELECT oprname, oprleft::regtype, oprright::regtype 
            FROM pg_operator 
            WHERE oprname IN ('<->', '<=>', '<#>')
        """)).fetchall()
        
        print(f"\nüìä –î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–µ–∫—Ç–æ—Ä–Ω—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã: {len(operators)}")
        for op in operators:
            print(f"   {op[0]} –¥–ª—è —Ç–∏–ø–æ–≤ {op[1]} –∏ {op[2]}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ pgvector: {e}")
        return False
    finally:
        db.close()

def check_embedding_storage():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫ —Ö—Ä–∞–Ω—è—Ç—Å—è —ç–º–±–µ–¥–¥–∏–Ω–≥–∏"""
    print("\nüóÑÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ö—Ä–∞–Ω–µ–Ω–∏—è —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤...")
    
    db = SessionLocal()
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã document_chunks
        result = db.execute(text("""
            SELECT column_name, data_type, is_nullable
            FROM information_schema.columns 
            WHERE table_name = 'document_chunks' 
            AND column_name = 'embedding'
        """)).fetchall()
        
        if result:
            col_info = result[0]
            print(f"‚úÖ –ü–æ–ª–µ embedding –Ω–∞–π–¥–µ–Ω–æ:")
            print(f"   –¢–∏–ø –¥–∞–Ω–Ω—ã—Ö: {col_info[1]}")
            print(f"   Nullable: {col_info[2]}")
        else:
            print("‚ùå –ü–æ–ª–µ embedding –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤
        result = db.execute(text("""
            SELECT 
                COUNT(*) as total_chunks,
                COUNT(embedding) as chunks_with_embeddings
            FROM document_chunks
        """)).fetchall()
        
        if result and result[0][0] > 0:
            stats = result[0]
            print(f"\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤:")
            print(f"   –í—Å–µ–≥–æ —á–∞–Ω–∫–æ–≤: {stats[0]}")
            print(f"   –° —ç–º–±–µ–¥–¥–∏–Ω–≥–∞–º–∏: {stats[1]}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ
            dim_result = db.execute(text("""
                SELECT array_length(embedding, 1) as embedding_dimension
                FROM document_chunks 
                WHERE embedding IS NOT NULL
                LIMIT 1
            """)).fetchall()
            
            if dim_result and dim_result[0][0]:
                print(f"   –†–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å: {dim_result[0][0]}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–º–µ—Ä —ç–º–±–µ–¥–¥–∏–Ω–≥–∞
        result = db.execute(text("""
            SELECT embedding[1:5] as first_5_values
            FROM document_chunks 
            WHERE embedding IS NOT NULL 
            LIMIT 1
        """)).fetchall()
        
        if result:
            print(f"   –ü—Ä–∏–º–µ—Ä –∑–Ω–∞—á–µ–Ω–∏–π: {result[0][0]}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
        return False
    finally:
        db.close()

def check_vector_indexes():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ–∫—Ç–æ—Ä–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã"""
    print("\nüìá –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ–∫—Ç–æ—Ä–Ω—ã—Ö –∏–Ω–¥–µ–∫—Å–æ–≤...")
    
    db = SessionLocal()
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∏–Ω–¥–µ–∫—Å—ã
        result = db.execute(text("""
            SELECT 
                indexname, 
                indexdef,
                tablename
            FROM pg_indexes 
            WHERE tablename = 'document_chunks'
            AND indexname LIKE '%embedding%'
        """)).fetchall()
        
        if result:
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –∏–Ω–¥–µ–∫—Å–æ–≤: {len(result)}")
            for idx in result:
                print(f"   {idx[0]}: {idx[1]}")
        else:
            print("‚ö†Ô∏è –í–µ–∫—Ç–æ—Ä–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            print("üí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Å–æ–∑–¥–∞—Ç—å –∏–Ω–¥–µ–∫—Å –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞:")
            print("   CREATE INDEX ON document_chunks USING ivfflat (embedding vector_cosine_ops);")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω–¥–µ–∫—Å–æ–≤: {e}")
        return False
    finally:
        db.close()

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö\n")
    
    pgvector_ok = check_pgvector()
    storage_ok = check_embedding_storage()
    indexes_ok = check_vector_indexes()
    
    print("\n" + "="*60)
    print("üìä –ò–¢–û–ì–ò:")
    print("="*60)
    
    if pgvector_ok:
        print("‚úÖ pgvector —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç")
    else:
        print("‚ùå pgvector –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    if storage_ok:
        print("‚úÖ –≠–º–±–µ–¥–¥–∏–Ω–≥–∏ —Ö—Ä–∞–Ω—è—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        print("üìù –¢–∏–ø —Ö—Ä–∞–Ω–µ–Ω–∏—è: ARRAY(Float) –≤ PostgreSQL")
        print("üîß –≠—Ç–æ –æ–±—ã—á–Ω–∞—è —Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–∞—è –ë–î —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –º–∞—Å—Å–∏–≤–æ–≤")
    else:
        print("‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å —Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤")
    
    if indexes_ok:
        print("‚úÖ –ò–Ω–¥–µ–∫—Å—ã –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã")
    
    print("\nüí° –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï:")
    if pgvector_ok and storage_ok:
        print("üéâ –£ –≤–∞—Å –ì–ò–ë–†–ò–î–ù–ê–Ø —Å–∏—Å—Ç–µ–º–∞:")
        print("   ‚Ä¢ PostgreSQL (—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–∞—è –ë–î) –¥–ª—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö")
        print("   ‚Ä¢ pgvector —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –¥–ª—è –≤–µ–∫—Ç–æ—Ä–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π")
        print("   ‚Ä¢ ARRAY(Float) –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤")
        print("   ‚Ä¢ –í–µ–∫—Ç–æ—Ä–Ω—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã (<->, <=>, <#>) –¥–ª—è –ø–æ–∏—Å–∫–∞")
    else:
        print("‚ö†Ô∏è –°–∏—Å—Ç–µ–º–∞ —Ç—Ä–µ–±—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")

if __name__ == "__main__":
    main() 