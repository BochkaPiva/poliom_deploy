#!/usr/bin/env python3
"""
–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ pgvector –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
"""

import sys
import os
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ services
services_path = Path(__file__).parent.parent
sys.path.append(str(services_path))

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
from dotenv import load_dotenv
load_dotenv('.env.local')

from sqlalchemy import text
from shared.models.database import SessionLocal

def install_pgvector():
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ pgvector"""
    print("üîß –£—Å—Ç–∞–Ω–æ–≤–∫–∞ pgvector...")
    
    db = SessionLocal()
    try:
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
        db.execute(text("CREATE EXTENSION IF NOT EXISTS vector"))
        db.commit()
        print("‚úÖ pgvector —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É
        result = db.execute(text("SELECT * FROM pg_extension WHERE extname = 'vector'")).fetchall()
        if result:
            print(f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ: pgvector –≤–µ—Ä—Å–∏—è {result[0][1]} –∞–∫—Ç–∏–≤–µ–Ω")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ pgvector: {e}")
        print("üí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
        print("   ‚Ä¢ pgvector –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ PostgreSQL")
        print("   ‚Ä¢ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π")
        print("   ‚Ä¢ –ù—É–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å: apt-get install postgresql-15-pgvector")
        return False
    finally:
        db.close()

def create_vector_indexes():
    """–°–æ–∑–¥–∞–µ–º –≤–µ–∫—Ç–æ—Ä–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞"""
    print("\nüìá –°–æ–∑–¥–∞–Ω–∏–µ –≤–µ–∫—Ç–æ—Ä–Ω—ã—Ö –∏–Ω–¥–µ–∫—Å–æ–≤...")
    
    db = SessionLocal()
    try:
        # –°–æ–∑–¥–∞–µ–º IVFFLAT –∏–Ω–¥–µ–∫—Å –¥–ª—è –∫–æ—Å–∏–Ω—É—Å–Ω–æ–≥–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
        print("üî® –°–æ–∑–¥–∞–µ–º IVFFLAT –∏–Ω–¥–µ–∫—Å...")
        db.execute(text("""
            CREATE INDEX IF NOT EXISTS idx_document_chunks_embedding_cosine 
            ON document_chunks 
            USING ivfflat (embedding vector_cosine_ops)
            WITH (lists = 100)
        """))
        
        # –°–æ–∑–¥–∞–µ–º HNSW –∏–Ω–¥–µ–∫—Å (–±–æ–ª–µ–µ –±—ã—Å—Ç—Ä—ã–π, –Ω–æ –±–æ–ª—å—à–µ –ø–∞–º—è—Ç–∏)
        print("üî® –°–æ–∑–¥–∞–µ–º HNSW –∏–Ω–¥–µ–∫—Å...")
        db.execute(text("""
            CREATE INDEX IF NOT EXISTS idx_document_chunks_embedding_hnsw 
            ON document_chunks 
            USING hnsw (embedding vector_cosine_ops)
            WITH (m = 16, ef_construction = 64)
        """))
        
        db.commit()
        print("‚úÖ –í–µ–∫—Ç–æ—Ä–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã —Å–æ–∑–¥–∞–Ω—ã")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–¥–µ–∫—Å–æ–≤: {e}")
        print("üí° –ò–Ω–¥–µ–∫—Å—ã –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ pgvector")
        return False
    finally:
        db.close()

def convert_to_vector_type():
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º ARRAY(Float) –≤ —Ç–∏–ø VECTOR"""
    print("\nüîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ —Ç–∏–ø VECTOR...")
    
    db = SessionLocal()
    try:
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∫–æ–ª–æ–Ω–∫—É —Å —Ç–∏–ø–æ–º VECTOR
        print("üìù –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É vector_embedding...")
        db.execute(text("""
            ALTER TABLE document_chunks 
            ADD COLUMN IF NOT EXISTS vector_embedding vector(312)
        """))
        
        # –ö–æ–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ ARRAY –≤ VECTOR
        print("üìã –ö–æ–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ...")
        db.execute(text("""
            UPDATE document_chunks 
            SET vector_embedding = embedding::vector
            WHERE embedding IS NOT NULL AND vector_embedding IS NULL
        """))
        
        db.commit()
        print("‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        result = db.execute(text("""
            SELECT COUNT(*) FROM document_chunks 
            WHERE vector_embedding IS NOT NULL
        """)).fetchall()
        
        print(f"üìä –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –∑–∞–ø–∏—Å–µ–π: {result[0][0]}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {e}")
        return False
    finally:
        db.close()

def test_vector_performance():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞"""
    print("\n‚ö° –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...")
    
    db = SessionLocal()
    try:
        import time
        
        # –¢–µ—Å—Ç–æ–≤—ã–π –≤–µ–∫—Ç–æ—Ä
        test_vector = "[" + ",".join(["0.1"] * 312) + "]"
        
        # –¢–µ—Å—Ç —Å ARRAY (—Ç–µ–∫—É—â–∏–π –º–µ—Ç–æ–¥)
        start_time = time.time()
        result1 = db.execute(text(f"""
            SELECT id, embedding <=> '{test_vector}'::vector as distance
            FROM document_chunks 
            WHERE embedding IS NOT NULL
            ORDER BY distance
            LIMIT 10
        """)).fetchall()
        array_time = time.time() - start_time
        
        # –¢–µ—Å—Ç —Å VECTOR (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π)
        start_time = time.time()
        result2 = db.execute(text(f"""
            SELECT id, vector_embedding <=> '{test_vector}'::vector as distance
            FROM document_chunks 
            WHERE vector_embedding IS NOT NULL
            ORDER BY distance
            LIMIT 10
        """)).fetchall()
        vector_time = time.time() - start_time
        
        print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
        print(f"   ARRAY –º–µ—Ç–æ–¥: {array_time:.3f} —Å–µ–∫")
        print(f"   VECTOR –º–µ—Ç–æ–¥: {vector_time:.3f} —Å–µ–∫")
        print(f"   –£—Å–∫–æ—Ä–µ–Ω–∏–µ: {array_time/vector_time:.1f}x")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        return False
    finally:
        db.close()

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ pgvector\n")
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º pgvector
    pgvector_ok = install_pgvector()
    
    if pgvector_ok:
        # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã
        indexes_ok = create_vector_indexes()
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
        convert_ok = convert_to_vector_type()
        
        if convert_ok:
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
            test_vector_performance()
    
    print("\n" + "="*60)
    print("üìä –ò–¢–û–ì–ò –£–°–¢–ê–ù–û–í–ö–ò:")
    print("="*60)
    
    if pgvector_ok:
        print("üéâ pgvector —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        print("‚úÖ –¢–µ–ø–µ—Ä—å –¥–æ—Å—Ç—É–ø–Ω—ã:")
        print("   ‚Ä¢ –ù–∞—Ç–∏–≤–Ω—ã–µ –≤–µ–∫—Ç–æ—Ä–Ω—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã (<->, <=>, <#>)")
        print("   ‚Ä¢ –í–µ–∫—Ç–æ—Ä–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã (IVFFLAT, HNSW)")
        print("   ‚Ä¢ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–∏—Å–∫")
        print("   ‚Ä¢ –õ—É—á—à–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å")
        
        print("\nüí° –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print("   1. –û–±–Ω–æ–≤–∏—Ç–µ –º–æ–¥–µ–ª—å DocumentChunk –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Vector —Ç–∏–ø–∞")
        print("   2. –ò–∑–º–µ–Ω–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –Ω–∞—Ç–∏–≤–Ω—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã")
        print("   3. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ —É–ª—É—á—à–µ–Ω–Ω—É—é –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å")
    else:
        print("‚ö†Ô∏è pgvector –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        print("üí° –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –ë–î –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏")

if __name__ == "__main__":
    main() 