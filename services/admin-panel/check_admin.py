#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ —Å–æ–∑–¥–∞–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
"""

import os
import sys
from pathlib import Path

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env
from dotenv import load_dotenv
load_dotenv('.env')

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –∫ –º–æ–¥—É–ª—è–º
current_dir = Path(__file__).parent
sys.path.insert(0, str(current_dir))
sys.path.insert(0, str(current_dir / "shared"))

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º shared –º–æ–¥—É–ª–∏
try:
    # –ü—Ä–æ–±—É–µ–º –∏–º–ø–æ—Ä—Ç –¥–ª—è Docker
    from shared.utils.auth import get_password_hash, verify_password
    from shared.models.database import SessionLocal, engine, Base
    from shared.models import Admin
except ImportError:
    # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –ø—Ä–æ–±—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç
    from utils.auth import get_password_hash, verify_password
    from models.database import SessionLocal, engine, Base
    from models import Admin

# –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
print(f"üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î:")
print(f"  Host: {os.getenv('POSTGRES_HOST', 'localhost')}")
print(f"  Port: {os.getenv('POSTGRES_PORT', '5432')}")
print(f"  Database: {os.getenv('POSTGRES_DB', 'rag_chatbot')}")
print(f"  User: {os.getenv('POSTGRES_USER', 'postgres')}")
print(f"  Password: {'*' * len(os.getenv('POSTGRES_PASSWORD', ''))}")

def check_and_create_admin():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Å–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
    Base.metadata.create_all(bind=engine)
    print("‚úÖ –¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã")
    
    db = SessionLocal()
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        admins = db.query(Admin).all()
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {len(admins)}")
        
        for admin in admins:
            print(f"  - ID: {admin.id}, Username: {admin.username}, Email: {admin.email}, Active: {admin.is_active}")
        
        # –ï—Å–ª–∏ –Ω–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤, —Å–æ–∑–¥–∞–µ–º
        if len(admins) == 0:
            print("üîß –°–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é...")
            default_admin = Admin(
                username="admin",
                email="admin@example.com",
                hashed_password=get_password_hash("admin123"),
                full_name="–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é",
                is_active=True
            )
            db.add(default_admin)
            db.commit()
            db.refresh(default_admin)
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: {default_admin.username} (ID: {default_admin.id})")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å –¥–ª—è admin
        admin_user = db.query(Admin).filter(Admin.username == "admin").first()
        if admin_user:
            print(f"\nüîê –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 'admin'...")
            password_check = verify_password("admin123", admin_user.hashed_password)
            print(f"  - –ü–∞—Ä–æ–ª—å 'admin123' –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω: {password_check}")
            print(f"  - –•–µ—à –ø–∞—Ä–æ–ª—è: {admin_user.hashed_password[:50]}...")
            
            # –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º —Ö–µ—à –ø–∞—Ä–æ–ª—è –¥–ª—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
            new_hash = get_password_hash("admin123")
            print(f"  - –ù–æ–≤—ã–π —Ö–µ—à: {new_hash[:50]}...")
            
            if not password_check:
                print("üîß –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–æ–ª—å...")
                admin_user.hashed_password = new_hash
                db.commit()
                print("‚úÖ –ü–∞—Ä–æ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
    finally:
        db.close()

if __name__ == "__main__":
    check_and_create_admin() 