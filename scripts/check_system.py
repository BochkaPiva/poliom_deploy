#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã POLIOM
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
"""

import os
import sys
import time
import psycopg2
import redis
import requests
from pathlib import Path

def check_postgres_pgvector():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ PostgreSQL –∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è pgvector"""
    try:
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        db_url = os.getenv('DATABASE_URL', 'postgresql://postgres:poliom_secure_2024_db_pass@localhost:5432/poliom_local')
        
        # –ü–∞—Ä—Å–∏–º URL
        from urllib.parse import urlparse
        parsed = urlparse(db_url)
        
        conn = psycopg2.connect(
            host=parsed.hostname,
            port=parsed.port or 5432,
            database=parsed.path[1:],  # —É–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—ã–π —Å–ª–µ—à
            user=parsed.username,
            password=parsed.password
        )
        
        cursor = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        cursor.execute("SELECT version();")
        version = cursor.fetchone()[0]
        print(f"‚úÖ PostgreSQL –ø–æ–¥–∫–ª—é—á–µ–Ω: {version}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ pgvector
        cursor.execute("SELECT EXISTS(SELECT 1 FROM pg_extension WHERE extname = 'vector');")
        has_vector = cursor.fetchone()[0]
        
        if has_vector:
            print("‚úÖ –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ pgvector —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–æ–∑–¥–∞–Ω–∏—è –≤–µ–∫—Ç–æ—Ä–Ω—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤
            cursor.execute("SELECT vector_dims(ARRAY[1,2,3]::vector);")
            dims = cursor.fetchone()[0]
            print(f"‚úÖ pgvector —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ (—Ç–µ—Å—Ç: {dims} –∏–∑–º–µ—Ä–µ–Ω–∏–π)")
        else:
            print("‚ùå –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ pgvector –ù–ï —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!")
            return False
            
        cursor.close()
        conn.close()
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ PostgreSQL: {e}")
        return False

def check_redis():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ Redis"""
    try:
        redis_url = os.getenv('REDIS_URL', 'redis://localhost:6379/0')
        r = redis.from_url(redis_url)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        r.ping()
        print("‚úÖ Redis –ø–æ–¥–∫–ª—é—á–µ–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–∏—Å—å/—á—Ç–µ–Ω–∏–µ
        r.set('test_key', 'test_value', ex=10)
        value = r.get('test_key')
        if value == b'test_value':
            print("‚úÖ Redis —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            r.delete('test_key')
        else:
            print("‚ùå Redis –Ω–µ –º–æ–∂–µ—Ç –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å/—á–∏—Ç–∞—Ç—å –¥–∞–Ω–Ω—ã–µ")
            return False
            
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ Redis: {e}")
        return False

def check_admin_panel():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    try:
        admin_url = os.getenv('ADMIN_PANEL_URL', 'http://localhost:8001')
        
        response = requests.get(f"{admin_url}/health", timeout=10)
        if response.status_code == 200:
            print("‚úÖ –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –¥–æ—Å—Ç—É–ø–Ω–∞")
            return True
        else:
            print(f"‚ùå –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ (–∫–æ–¥: {response.status_code})")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏: {e}")
        return False

def check_file_permissions():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª–∞–º"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞–ø–∫—É uploads
        uploads_dir = Path("uploads")
        uploads_dir.mkdir(exist_ok=True)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∑–∞–ø–∏—Å–∏
        test_file = uploads_dir / "test_write.txt"
        test_file.write_text("test")
        test_file.unlink()
        
        print("‚úÖ –ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª–∞–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã POLIOM...")
    print("=" * 50)
    
    checks = [
        ("PostgreSQL –∏ pgvector", check_postgres_pgvector),
        ("Redis", check_redis),
        ("–ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª–∞–º", check_file_permissions),
        ("–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", check_admin_panel),
    ]
    
    failed_checks = []
    
    for name, check_func in checks:
        print(f"\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞: {name}")
        if not check_func():
            failed_checks.append(name)
    
    print("\n" + "=" * 50)
    
    if failed_checks:
        print("‚ùå –°–ò–°–¢–ï–ú–ê –ù–ï –ì–û–¢–û–í–ê –ö –†–ê–ë–û–¢–ï!")
        print("–ù–µ—É–¥–∞—á–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏:")
        for check in failed_checks:
            print(f"  - {check}")
        sys.exit(1)
    else:
        print("‚úÖ –í–°–ï –ü–†–û–í–ï–†–ö–ò –ü–†–û–ô–î–ï–ù–´! –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ.")
        sys.exit(0)

if __name__ == "__main__":
    main() 